require 'rails_helper'

RSpec.describe "Graphs", type: :request do
  before do
    csv= <<~CSV.chomp(
      Glucose Data,Generated on,04-29-2025 10:34 PM UTC,Generated by,Jeffrey Waltzer
      Device,Serial Number,Device Timestamp,Record Type,Historic Glucose mg/dL,Scan Glucose mg/dL,Non-numeric Rapid-Acting Insulin,Rapid-Acting Insulin (units),Non-numeric Food,Carbohydrates (grams),Carbohydrates (servings),Non-numeric Long-Acting Insulin,Long-Acting Insulin (units),Notes,Strip Glucose mg/dL,Ketone mmol/L,Meal Insulin (units),Correction Insulin (units),User Change Insulin (units)
      FreeStyle Libre 3,99628558-b199-48dc-8a24-9ad9268aad6a,03-14-2025 09:52 PM,0,180,,,,,,,,,,,,,,
      FreeStyle Libre 3,99628558-b199-48dc-8a24-9ad9268aad6a,03-14-2025 09:57 PM,0,182,,,,,,,,,,,,,,
      FreeStyle Libre 3,99628558-b199-48dc-8a24-9ad9268aad6a,03-14-2025 10:02 PM,0,179,,,,,,,,,,,,,,
    CSV
    )
    glucose_csv = GlucoseCsv.create!(csv:)
    CsvParser.new(csv).build_measurements
  end

  describe "GET /show" do
    it "renders SVG" do
      get "/graphs/1"
      expect(response.body).to include("<svg")
    end

    describe "SVG" do
      let(:xml) do
        get "/graphs/1"
        xml = Nokogiri::XML.parse(response.body) do |config|
          config.options = Nokogiri::XML::ParseOptions::STRICT |
                           Nokogiri::XML::ParseOptions::DTDLOAD |
                           Nokogiri::XML::ParseOptions::DTDVALID
        end
        xml.remove_namespaces!
        xml
      end

      let(:polyline) { xml.at_xpath('/svg/svg/polyline').attributes }
      
      it 'has a polyline d' do
        expect(polyline['points'].value).to eq "0,18000 300,18200 600,17900"
      end

    end
  end
end
